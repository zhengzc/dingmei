<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.dingmei</groupId>
    <artifactId>dingmei</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>

    <!-- 定义属性 -->
    <name>dingmei</name>

    <!-- 	仓库 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <org.springframework.version>3.1.3.RELEASE</org.springframework.version>
        <freemarker.version>2.3.19</freemarker.version>
        <morphia.versions>1.2.3</morphia.versions>
        <finalName>dingmei</finalName>
    </properties>

    <!-- 	插件仓库 -->
    <repositories>

        <!--<repository>
            <id>ibiblio.org</id>
            <name>ibiblio</name>
            <url>http://mirrors.ibiblio.org/maven2</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>-->

    </repositories>

    <pluginRepositories>
        <!--<pluginRepository>
            <id>eap</id>
            <url>http://maven.repository.redhat.com/techpreview/all</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>-->
    </pluginRepositories>


    <!-- 	依赖 -->
    <build>
        <finalName>${finalName}</finalName>

        <!-- 	资源配置 -->
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <!-- 插件 -->
        <plugins>
            <!-- maven-eclipse插件 -->
            <!-- 			<plugin> -->
            <!-- 				<groupId>org.apache.maven.plugins</groupId> -->
            <!-- 				<artifactId>maven-eclipse-plugin</artifactId> -->
            <!-- 				<version>2.9</version> -->
            <!-- 			</plugin> -->

            <!-- 打包插件 -->
            <!-- 			<plugin> -->
            <!-- 				<artifactId>maven-war-plugin</artifactId> -->
            <!-- 				<configuration> -->
            <!-- 					<webappDirectory>${basedir}/WebRoot</webappDirectory> -->
            <!-- 					<warSourceDirectory>${basedir}/WebRoot</warSourceDirectory> -->
            <!-- 				</configuration> -->
            <!-- 			</plugin> -->
            <!-- 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.0.2</version>
                <!-- 				设置编译jdk版本以及编译编码方式 -->
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <profiles>

        <!-- 		openshift 生产环境 -->
        <profile>
            <!-- When built in OpenShift the 'openshift' profile will be used when
                invoking mvn. -->
            <!-- Use this profile for any OpenShift specific customization your app
                will need. -->
            <!-- By default that is to put the resulting archive into the 'webapps'
                folder. -->
            <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
            <id>openshift</id>

            <build>
                <finalName>${finalName}</finalName>

                <resources>
                    <resource>
                        <directory>${project.basedir}/src/main/resources-pro</directory>
                    </resource>
                </resources>

                <plugins>
                    <plugin>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>2.1.1</version>
                        <configuration>
                            <outputDirectory>webapps</outputDirectory>
                            <warName>ROOT</warName>
                        </configuration>
                    </plugin>

                    <!-- 编译插件 -->
                    <!-- <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <source>1.7</source>
                            <target>1.7</target>
                            <encoding>UTF-8</encoding>
                        </configuration>
                    </plugin>  -->
                </plugins>
            </build>
        </profile>

        <!-- 		开发环境 -->
        <profile>
            <id>dev</id>
            <!-- 			默认激活 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <resources>
                    <resource>
                        <directory>${project.basedir}/src/main/resources-dev</directory>
                    </resource>
                </resources>
            </build>
        </profile>

        <!-- 		我的生产环境 -->
        <profile>
            <id>myPro</id>

            <properties>
                <tomcat.dir>/home/zhengzhichao/dev_tool/apache-tomcat-6.0.37</tomcat.dir>
            </properties>

            <build>
                <finalName>${finalName}</finalName>

                <resources>
                    <resource>
                        <directory>${project.basedir}/src/main/resources-myPro</directory>
                    </resource>
                </resources>


                <plugins>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.5</version>
                        <!-- 					    跳过测试 -->
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

                    <!-- 					使用ant脚本自动化集成 -->
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>

                            <execution>
                                <id>updateCode</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo message="---------->fetch code from server!"></echo>
                                        <exec executable="git pull" dir="${project.basedir}"></exec>
                                    </tasks>
                                </configuration>
                            </execution>

                            <execution>
                                <id>deployment</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo message="---------->stop tomcat server!"></echo>
                                        <!-- 			                        	停止tomcat服务器 -->
                                        <exec executable="shutdown.sh" dir="${tomcat.dir}/bin"></exec>
                                        <!-- 			                        	清空部署目录 -->
                                        <echo message="---------->clean tomcat deployment!"></echo>
                                        <delete file="${tomcat.dir}/webapps/${finalName}.war"></delete>
                                        <delete dir="${tomcat.dir}/webapps/${finalName}"></delete>
                                        <delete dir="${tomcat.dir}/work"></delete>
                                        <!-- 										copy war包到部署目录 -->
                                        <echo message="---------->copy war to deployment dir!"></echo>
                                        <copy file="${project.basedir}/target/${finalName}.war" todir="${tomcat.dir}/webapps">
                                        </copy>
                                        <!-- 										启动tomcat服务器 -->
                                        <echo message="---------->start tomcat server!"></echo>
                                        <exec executable="startup.sh" dir="${tomcat.dir}/bin" failonerror="true"></exec>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>
    <dependencies>
        <!-- javaEE默认依赖jar:start -->
        <dependency>
            <groupId>org.apache.openejb</groupId>
            <artifactId>javaee-api</artifactId>
            <version>6.0-5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.faces</groupId>
            <artifactId>jsf-api</artifactId>
            <version>1.2_04</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.faces</groupId>
            <artifactId>jsf-impl</artifactId>
            <version>1.2_04</version>
            <scope>provided</scope>
        </dependency>
        <!-- end -->

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.2-1003-jdbc4</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.25</version>
        </dependency>


        <!-- 		junit4 begin -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>

        <!-- 		freemarker start -->
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>${freemarker.version}</version>
        </dependency>
        <!--  		freemarker end -->

        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.12</version>
        </dependency>

        <!--spring start -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Expression Language (depends on spring-core) Define this if you use
            Spring Expression APIs (org.springframework.expression.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define
            this if you use Spring Bean APIs (org.springframework.beans.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core,
            spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Application Context (depends on spring-core, spring-expression, spring-aop,
            spring-beans) This is the central artifact for Spring's Dependency Injection
            Container and is generally always defined -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Various Application Context utilities, including EhCache, JavaMail,
            Quartz, and Freemarker integration Define this if you need any of these integrations -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Transaction Management Abstraction (depends on spring-core, spring-beans,
            spring-aop, spring-context) Define this if you use Spring Transactions or
            DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context,
            spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA,
            and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx)
            Define this if you need ORM (org.springframework.orm.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB,
            JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans,
            spring-context) Define this if you need OXM (org.springframework.oxm.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Web application development utilities applicable to both Servlet and
            Portlet Environments (depends on spring-core, spring-beans, spring-context)
            Define this if you use Spring MVC, or wish to use Struts, JSF, or another
            web framework with Spring (org.springframework.web.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans,
            spring-context, spring-web) Define this if you use Spring MVC with a Servlet
            Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans,
            spring-context, spring-web) Define this if you use Spring MVC with a Portlet
            Container (org.springframework.web.portlet.*) -->
        <!-- 		<dependency> -->
        <!-- 			<groupId>org.springframework</groupId> -->
        <!-- 			<artifactId>spring-webmvc-portlet</artifactId> -->
        <!-- 			<version>${org.springframework.version}</version> -->
        <!-- 		</dependency> -->

        <!-- Support for testing Spring applications with tools such as JUnit and
            TestNG This artifact is generally always defined with a 'test' scope for
            the integration testing framework and unit testing stubs -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${org.springframework.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- 		spring security -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-acl</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <!--spring end -->

        <!-- 		日志相关 begin -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>



        <!--log4j start -->
        <!-- 		<dependency> -->
        <!-- 			<groupId>log4j</groupId> -->
        <!-- 			<artifactId>log4j</artifactId> -->
        <!-- 			<version>1.2.14</version> -->
        <!-- 		</dependency> -->
        <!--end -->

        <!-- 		日志相关 end -->

        <!-- aspectj start -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.6.8</version>
            <!-- <scope>runtime</scope> -->
        </dependency>
        <!--end -->

        <!-- cglib start -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>2.2.2</version>
            <scope>runtime</scope>
        </dependency>
        <!-- end -->

        <!--mybatis start -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.1.1</version>
        </dependency>
        <!--end -->

        <!--连接池 start -->
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.3</version>
            <scope>runtime</scope>
        </dependency>
        <!--连接池 end -->

        <!-- 		 commons-httpclient begin -->
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>
        <!-- 		 commons-httpclient end -->

        <!-- 		json-lib begin-->
        <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.4</version>
            <classifier>jdk15</classifier>
        </dependency>

        <dependency>
            <artifactId>xom</artifactId>
            <groupId>xom</groupId>
            <version>1.2.5</version>
        </dependency>
        <!-- 		json-lib end -->

        <!-- jsoup HTML parser library @ http://jsoup.org/ -->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.7.3</version>
        </dependency>


        <!-- 		about mongo begin -->
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongo-java-driver</artifactId>
            <version>2.11.1</version>
        </dependency>

        <dependency>
            <groupId>com.github.jmkgreen.morphia</groupId>
            <artifactId>morphia</artifactId>
            <version>${morphia.versions}</version>
        </dependency>

        <dependency>
            <groupId>com.github.jmkgreen.morphia</groupId>
            <artifactId>morphia-validation</artifactId>
            <version>${morphia.versions}</version>
        </dependency>

        <dependency>
            <groupId>com.github.jmkgreen.morphia</groupId>
            <artifactId>morphia-logging-slf4j</artifactId>
            <version>${morphia.versions}</version>
        </dependency>

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
        </dependency>
        <!-- 		about mongo end -->

        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>1.8.6</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <version>4.1.0.Final</version>
        </dependency>

        <!-- 		lucene begin -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>4.7.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-common</artifactId>
            <version>4.7.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-smartcn</artifactId>
            <version>4.7.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-queryparser</artifactId>
            <version>4.7.2</version>
        </dependency>
        <!-- 		lucene end -->

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.3</version>
        </dependency>

    </dependencies>

</project>
